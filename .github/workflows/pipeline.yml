name: pipeline

on:
  [push]

env: 
  APP_IS_RUNNING_IN_PIPELINE: true;

jobs:
  build-lint-and-test-frontend: 
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v3

      - name: Setup node env 🏗
        uses: actions/setup-node@v3.2.0
        with:
          node-version: 16
          check-latest: true
  
      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2.1.4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 📦
        run: cd frontend && yarn

      - name: Build 🏗
        run: cd frontend && yarn build
  
      - name: Run linter 👀
        run: cd frontend && yarn lint

      - name: Run tests 🧪
        run: cd frontend && yarn test --passWithNoTests

  build-lint-and-test-backend:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v3

      - name: Setup node env 🏗
        uses: actions/setup-node@v3.2.0
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2.1.4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 📦
        run: cd backend && yarn

      - name: Run linter 👀
        run: cd backend && yarn lint

      - name: Run tests 🧪
        run: cd backend && yarn test

  build-packages:
      if: github.ref == 'refs/heads/master'
      needs: [build-lint-and-test-frontend, build-lint-and-test-backend]
      runs-on: ubuntu-latest

      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Semantic release
        uses: cycjimmy/semantic-release-action@v3
        with:
          semantic_version: 0.1.0
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.INVOICE_APP_PAT }}

      - name: Login to registry 🔐
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.INVOICE_APP_PAT }}

      - name: Frontend - Build and push image 🚀
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v3
        with:
          push: true
          context: "./frontend"
          file: "./frontend/Dockerfile"          
          tags: ghcr.io/pscldev/invoice-app/frontend:latest,ghcr.io/pscldev/invoice-app/frontend:${{ steps.semantic.outputs.new_release_version }}
      
      - name: Backend - Build and push image 🚀
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v3
        with:
          push: true
          context: "./backend"
          file: "./backend/Dockerfile"
          tags: ghcr.io/pscldev/invoice-app/backend:latest,ghcr.io/pscldev/invoice-app/backend:${{ steps.semantic.outputs.new_release_version }}